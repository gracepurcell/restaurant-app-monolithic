name: Build Workflow

# Trigger the workflow on push events to the main branch
on:
  pull_request:
    branches: [main]

jobs:
#-------------------------------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    services:
      postgres: 
        image: 'postgres:latest'
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin -d flor_de_sal"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: checkout app
        uses: actions/checkout@v4

      - name: Setup Node.js for Applications
        uses: actions/setup-node@v3
        with: 
          node-version: '18'

      - name: Install Client Dependencies
        run: npm install
        working-directory: ./client

      - name: Build Client
        run: npm run build
        working-directory: ./client

      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend

      - name: Build Backend
        run: nohup npm run start &
        working-directory: ./backend
        env:
          DATABASE_URL: ${{secrets.CI_BUILD_DATABASE_URL}}
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          
#-------------------------------------------------------------------------------

  # dockerize_push_dev:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout app
  #       uses: actions/checkout@v4
        
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
      
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2        
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
      
  #     - name: Build and Push Client Image for multiple platforms - Dev Stage
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:client-actions-dev-18 --target=dev --push .
  #       working-directory: ./client

#-------------------------------------------------------------------------------

  # dockerize_push_backend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout app
  #       uses: actions/checkout@v4
        
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
      
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2        
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
      
  #     - name: Build and Push Backend Image for multiple platforms
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:backend-actions-18 --push .
  #       working-directory: ./backend

#-------------------------------------------------------------------------------

  # snyk_monitor_dev:
  #   runs-on: ubuntu-latest
  #   needs: dockerize_push_dev 
  #   steps:
  #     - name: checkout app
  #       uses: actions/checkout@v4

  #     - name: Set up Snyk
  #       uses: snyk/actions/setup@master

  #     - name: Authenticate Snyk
  #       run: snyk auth ${{ secrets.SNYK_TOKEN }}

  #     - name: Monitor Client Docker Image with Snyk
  #       run: snyk monitor --docker ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:client-actions-dev-18
      
#-------------------------------------------------------------------------------

  # snyk_monitor_backend:
  #   runs-on: ubuntu-latest
  #   needs: dockerize_push_backend 
  #   steps:
  #     - name: checkout app
  #       uses: actions/checkout@v4

  #     - name: Set up Snyk
  #       uses: snyk/actions/setup@master

  #     - name: Authenticate Snyk
  #       run: snyk auth ${{ secrets.SNYK_TOKEN }}
      
  #     - name: Monitor Backend Docker Image with Snyk
  #       run: snyk monitor --docker ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:backend-actions-18

#-------------------------------------------------------------------------------

  deploy-to-eks:
    runs-on: ubuntu-latest
    #needs: dockerize_push_backend
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TASSI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TASSI }}
          aws-region: ${{ secrets.AWS_REGION_TASSI }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name restaurant-app --region ${{ secrets.AWS_REGION_TASSI }}

      - name: Deploy StorageClass
        run: kubectl apply -f ./k8s/storage-class.yml

      - name: Deploy Secrets
        run: kubectl apply -f ./k8s/secrets.yml

      - name: Deploy Database
        run: kubectl apply -f ./k8s/statefulset-db.yml

      - name: Check Status
        run: kubectl rollout status statefulset/postgres 

      - name: Deploy Backend
        run: kubectl apply -f ./k8s/backend.yml
        
      - name: Check Status
        run: kubectl rollout status deployment/backend-deployment

        ## Here get the BE external IP
      - name: Extract the BE Service External IP
        run: echo "BACKEND_URL=$(kubectl get services | grep backend-service | awk '{print $4}'):6001" >> $GITHUB_ENV

        ## Rebuild the Docker image for deploying
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Output ENV Var incase
        run: echo ${{ env.BACKEND_URL }}

      - name: Modify Dockerfile with External IP
        run: |
          sed -i "s|ENV VITE_SERVER_URL=.*|ENV VITE_SERVER_URL=http://${{ env.BACKEND_URL }}|" ./client/Dockerfile

      - name: Cat Dockerfile
        run: cat ./client/Dockerfile

      - name: Test build with props 
        uses: docker/build-push-action@v2
        with:
          context: ./client
          platforms: |
            linux/amd64
            linux/arm64
          target: deploy 
          tags: ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:client-build-with-injection-final-18
          push: true

        ## Then build and push the image 
      - name: Deploy Frontend
        run: kubectl apply -f ./k8s/client.yml
      
      - name: Check Status
        run: kubectl rollout status deployment/client-deployment

      - name: Give Service breathing space for DNS
        run: sleep 30


        
