name: Build Workflow

# Trigger the workflow on push events to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:
    

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres: 
        image: 'postgres:latest'
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin -d flor_de_sal"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        
    steps:
      - name: checkout app
        uses: actions/checkout@v4

      - name: Setup Node.js for Applications
        uses: actions/setup-node@v3
        with: 
          node-version: '16'

      - name: Install Client Dependencies
        run: npm install
        working-directory: ./client

      - name: Build Client
        run: npm run build
        working-directory: ./client

      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend

      - name: Build Backend
        run: nohup npm run start &
        working-directory: ./backend
        env:
          DATABASE_URL: ${{secrets.CI_BUILD_DATABASE_URL}}
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}

  dockerize_push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: checkout app
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and Push Client Image for multiple platforms - Deploy Stage
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:client-actions-deploy --target=deploy --push .
        working-directory: ./client

      - name: Build and Push Client Image for multiple platforms - Dev Stage
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:client-actions-dev --target=dev --push .
        working-directory: ./client
      - name: Build and Push Backend Image for multiple platforms
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:backend-actions --push .
        working-directory: ./backend

  snyk_monitor:
    runs-on: ubuntu-latest
    needs: dockerize_push 
    steps:
      - name: checkout app
        uses: actions/checkout@v4

      - name: Set up Snyk
        uses: snyk/actions/setup@master

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Monitor Client Docker Image with Snyk
        run: snyk monitor --docker ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:client-actions-dev

      - name: Monitor Backend Docker Image with Snyk
        run: snyk monitor --docker ${{ secrets.DOCKER_USERNAME }}/restaurant-app-3-tier:backend-actions

  deploy:
    runs-on: ubuntu-latest
    needs: snyk_monitor
    steps:
      - name: Checkout app 
        uses: actions/checkout@v4

      # Install conntrack
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y conntrack
      
      - name: Setup Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/
          minikube start --driver=none

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get Minikube context 
        run: kubectl config use-context minikube

      - name: Deploy Project to Kubernetes
        run: kubectl apply -k .
        working-directory: ./k8s

      - name: Check Status
        run: |
          kubectl rollout status deployment/client-deployment
          kubectl rollout status deployment/backend-deployment
          kubectl rollout status deployment/postgres

      
